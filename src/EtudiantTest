import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;

public class EtudiantTest {
    
    @Test
    public void testAjouterNote() {
        Formation formation = new Formation("INFO001");
        Matiere java = new Matiere("Java");
        formation.ajouterMatiere(java, 3);
        
        Identite identite = new Identite("12345", "Dupont", "Jean");
        Etudiant etudiant = new Etudiant(identite, formation);
        
        etudiant.ajouterNote(java, 15.0);
        
        assertEquals(15.0, etudiant.moyenneMatiere(java), 0.01);
    }
    
    @Test
    public void testAjouterNoteHorsIntervalle() {
        Formation formation = new Formation("INFO001");
        Matiere java = new Matiere("Java");
        formation.ajouterMatiere(java, 3);
        
        Identite identite = new Identite("12345", "Dupont", "Jean");
        Etudiant etudiant = new Etudiant(identite, formation);
        
        // Note trop basse
        assertThrows(IllegalArgumentException.class, () -> etudiant.ajouterNote(java, -5.0));
        // Note trop haute
        assertThrows(IllegalArgumentException.class, () -> etudiant.ajouterNote(java, 25.0));
    }
    
    @Test
    public void testAjouterNoteMatiereNonIncluse() {
        Formation formation = new Formation("INFO001");
        Matiere java = new Matiere("Java");
        Matiere python = new Matiere("Python"); // Non incluse dans la formation
        
        formation.ajouterMatiere(java, 3);
        
        Identite identite = new Identite("12345", "Dupont", "Jean");
        Etudiant etudiant = new Etudiant(identite, formation);
        
        // Doit lever une exception pour une matière non incluse dans la formation
        assertThrows(IllegalArgumentException.class, () -> etudiant.ajouterNote(python, 15.0));
    }
    
    @Test
    public void testMoyenneMatiere() {
        Formation formation = new Formation("INFO001");
        Matiere java = new Matiere("Java");
        formation.ajouterMatiere(java, 3);
        
        Identite identite = new Identite("12345", "Dupont", "Jean");
        Etudiant etudiant = new Etudiant(identite, formation);
        
        etudiant.ajouterNote(java, 10.0);
        etudiant.ajouterNote(java, 14.0);
        etudiant.ajouterNote(java, 12.0);
        
        // Moyenne attendue : (10+14+12)/3 = 12.0
        assertEquals(12.0, etudiant.moyenneMatiere(java), 0.01);
    }
    
    @Test
    public void testMoyenneMatiereSansNotes() {
        Formation formation = new Formation("INFO001");
        Matiere java = new Matiere("Java");
        formation.ajouterMatiere(java, 3);
        
        Identite identite = new Identite("12345", "Dupont", "Jean");
        Etudiant etudiant = new Etudiant(identite, formation);
        
        // Doit retourner 0.0 ou lever une exception selon l'implémentation
        assertEquals(0.0, etudiant.moyenneMatiere(java), 0.01);
    }
    
    @Test
    public void testMoyenneGenerale() {
        Formation formation = new Formation("INFO001");
        Matiere java = new Matiere("Java");
        Matiere python = new Matiere("Python");
        formation.ajouterMatiere(java, 3);
        formation.ajouterMatiere(python, 2);
        
        Identite identite = new Identite("12345", "Dupont", "Jean");
        Etudiant etudiant = new Etudiant(identite, formation);
        
        etudiant.ajouterNote(java, 10.0);
        etudiant.ajouterNote(java, 14.0);
        etudiant.ajouterNote(python, 16.0);
        etudiant.ajouterNote(python, 18.0);
        
        // Moyenne Java : (10+14)/2 = 12.0
        // Moyenne Python : (16+18)/2 = 17.0
        // Moyenne générale : (12*3 + 17*2)/(3+2) = (36 + 34)/5 = 70/5 = 14.0
        assertEquals(14.0, etudiant.moyenneGenerale(), 0.01);
    }
    
    @Test
    public void testMoyenneGeneraleSansNotes() {
        Formation formation = new Formation("INFO001");
        Matiere java = new Matiere("Java");
        formation.ajouterMatiere(java, 3);
        
        Identite identite = new Identite("12345", "Dupont", "Jean");
        Etudiant etudiant = new Etudiant(identite, formation);
        
        // Doit retourner 0.0 ou lever une exception selon l'implémentation
        assertEquals(0.0, etudiant.moyenneGenerale(), 0.01);
    }
}
